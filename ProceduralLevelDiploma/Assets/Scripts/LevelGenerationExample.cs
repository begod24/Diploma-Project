using UnityEngine;

public class LevelGenerationExample : MonoBehaviour
{
    [Header("Example Settings")]
    public bool autoGenerateOnStart = true;
    public float autoGenerateDelay = 2f;
    
    [Header("References")]
    public ProceduralLevelGenerator levelGenerator;
    public LevelGeneratorManager generatorManager;
    public GameObject playerPrefab;
    
    private void Start()
    {
        if (autoGenerateOnStart)
        {
            Invoke(nameof(GenerateExampleLevel), autoGenerateDelay);
        }
        
        SetupExampleLevel();
    }
    
    private void SetupExampleLevel()
    {
        // Configure generation settings for a good example
        if (levelGenerator != null)
        {
            levelGenerator.settings.levelSize = new Vector3Int(20, 3, 20);
            levelGenerator.settings.minRoomSize = 4;
            levelGenerator.settings.maxRoomSize = 8;
            levelGenerator.settings.roomDensity = 0.5f;
            levelGenerator.settings.furnitureDensity = 0.2f;
            levelGenerator.settings.decorationDensity = 0.1f;
            levelGenerator.settings.corridorComplexity = 0.3f;
            levelGenerator.settings.useRandomSeed = true;
        }
        
        // Setup player if not already in scene
        if (FindObjectOfType<PlayerInputManager>() == null && playerPrefab != null)
        {
            Vector3 spawnPosition = new Vector3(10f, 2f, 10f);
            GameObject player = Instantiate(playerPrefab, spawnPosition, Quaternion.identity);
            
            // Add PlayerInputManager if not already present
            if (player.GetComponent<PlayerInputManager>() == null)
            {
                player.AddComponent<PlayerInputManager>();
            }
        }
    }
    
    private void GenerateExampleLevel()
    {
        if (generatorManager != null)
        {
            generatorManager.GenerateLevel();
        }
        else if (levelGenerator != null)
        {
            levelGenerator.GenerateLevel();
        }
    }
    
    private void Update()
    {
        // Example keyboard shortcuts
        if (Input.GetKeyDown(KeyCode.G))
        {
            GenerateExampleLevel();
        }
        
        if (Input.GetKeyDown(KeyCode.C))
        {
            if (generatorManager != null)
                generatorManager.ClearLevel();
            else if (levelGenerator != null)
                levelGenerator.ClearLevel();
        }
        
        if (Input.GetKeyDown(KeyCode.R))
        {
            // Generate with random seed
            if (levelGenerator != null)
            {
                levelGenerator.settings.useRandomSeed = true;
                GenerateExampleLevel();
            }
        }
        
        if (Input.GetKeyDown(KeyCode.Alpha1))
        {
            // Small level preset
            SetPreset("Small", new Vector3Int(15, 3, 15), 0.4f, 0.1f);
        }
        
        if (Input.GetKeyDown(KeyCode.Alpha2))
        {
            // Medium level preset
            SetPreset("Medium", new Vector3Int(25, 3, 25), 0.5f, 0.2f);
        }
        
        if (Input.GetKeyDown(KeyCode.Alpha3))
        {
            // Large level preset
            SetPreset("Large", new Vector3Int(35, 4, 35), 0.6f, 0.3f);
        }
    }
    
    private void SetPreset(string name, Vector3Int size, float roomDensity, float furnitureDensity)
    {
        if (levelGenerator == null) return;
        
        levelGenerator.settings.levelSize = size;
        levelGenerator.settings.roomDensity = roomDensity;
        levelGenerator.settings.furnitureDensity = furnitureDensity;
        levelGenerator.settings.useRandomSeed = true;
        
        Debug.Log($"Applied {name} preset - Size: {size}, Room Density: {roomDensity}, Furniture Density: {furnitureDensity}");
        
        GenerateExampleLevel();
    }
    
    private void OnGUI()
    {
        // Simple on-screen instructions
        GUILayout.BeginArea(new Rect(10, 10, 300, 200));
        GUILayout.BeginVertical("box");
        
        GUILayout.Label("Procedural Level Generator", GUI.skin.box);
        GUILayout.Space(10);
        
        GUILayout.Label("Controls:");
        GUILayout.Label("G - Generate new level");
        GUILayout.Label("C - Clear level");
        GUILayout.Label("R - Random seed generation");
        GUILayout.Label("1 - Small level preset");
        GUILayout.Label("2 - Medium level preset");
        GUILayout.Label("3 - Large level preset");
        
        GUILayout.Space(10);
        
        if (levelGenerator != null)
        {
            GUILayout.Label($"Current Seed: {levelGenerator.GetCurrentSeed()}");
            GUILayout.Label($"Level Size: {levelGenerator.settings.levelSize}");
        }
        
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }
}
